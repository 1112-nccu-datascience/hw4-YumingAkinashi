shiny::runApp()
runApp()
?ls()
ls("package:datasets")
ls("datasets")
?get
get("iris", "package:datasets")
iris <- get("iris", "package:datasets")
summary(iris)
runApp()
iris
runApp()
runApp()
runApp()
runApp()
library(shiny)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?renderPrint
?renderTable
runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
?selectInput
runApp()
d <- read.table('orange_small_train.data.gz',  	# Note: 1
header=T,
sep='\t',
na.strings=c('NA','')) 	# Note: 2
shiny::runApp()
x1 <- rnorm(1000, 0, 1)
x2 <- rnorm(1000, 0, 1)
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
View(df)
?rep
rep("x1", length(x1))
runApp()
iris <- get("iris", "package:datasets")
runApp()
runApp()
runApp()
?column
runApp()
?ggbiplot
runApp()
runApp()
runApp()
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
View(ir.pca)
g <- ggbiplot(ir.pca, choices = c(1, 3), obs.scale = 1, var.scale = 1, groups = ir.species)
g
?selectInput
runApp()
runApp()
pcaVars <- c("PCA1" = 1,
"PCA2" = 2,
"PCA3" = 3,
"PCA4" = 4)
pcaVars[1]
pcaVars[2]
pcaVars[[1]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
iris <- get("iris", "package:datasets")
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
View(log.ir)
View(ir.pca)
table(ir.pca)
ir.pca$x
rs.pca <- ir.pca$x
rs.pca <- as.data.frame(ir.pca$x)
View(rs.pca)
View(ir.pca)
View(ir.pca)
runApp()
runApp()
runApp()
runApp()
runApp()
>tabsetPanel
?tabsetPanel
runApp()
runApp()
runApp()
runApp()
?fluidPage
?tabsetPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(ir.pca)
runApp()
runApp()
?sidebarPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
datasets::iris
get("x", "iris")
iris <- get("iris", "package:datasets")
get("x", "iris")
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
get("x", "ir.pca")
ir.pca[["x"]]
runApp()
runApp()
runApp()
runApp()
runApp()
?tabPanel
runApp()
?sidebarPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(ir.pca)
runApp()
runApp()
runApp()
setwd("D:/東西/課程/111-2/資料科學/code08.unsup/protein")
# read data
protein <- read.table("protein.txt", sep="\t", header=TRUE)
View(log.ir)
View(protein)
# scale your data
vars.to.use <- colnames(protein)[-1]
pmatrix <- scale(protein[,vars.to.use])
pcenter <- attr(pmatrix, "scaled:center")
pscale <- attr(pmatrix, "scaled:scale")
# Hierarchical clustering
d <- dist(pmatrix, method="euclidean")
pfit <- hclust(d, method="ward")
plot(pfit, labels=protein$Country)
# The dendrogram suggests five clusters = > draw the rectangles on the dendrogram
rect.hclust(pfit, k=5)
# Extracting the clusters found by hclust()
groups <- cutree(pfit, k=5)
print_clusters(groups, 5)
print_clusters <- function(labels, k) {
for(i in 1:k) {
print(paste("cluster", i))
print(protein[labels==i,c("Country","RedMeat","Fish","Fr.Veg")])
}
}
print_clusters(groups, 5)
# VISUALIZING CLUSTERS by PCA
library(ggplot2)
princ <- prcomp(pmatrix)
nComp <- 4
project <- predict(princ, newdata=pmatrix)[,1:nComp]
project.plus <- cbind(as.data.frame(project),
cluster=as.factor(groups),
country=protein$Country)
ggplot(project.plus, aes(x=PC1, y=PC2)) +
geom_point(aes(shape=cluster)) +
geom_text(aes(label=country),
hjust=0, vjust=1)
ggplot(project.plus, aes(x=PC3, y=PC4)) +
geom_point(aes(shape=cluster)) +
geom_text(aes(label=country),
hjust=0, vjust=1)
# k-means
library(fpc)
kbest.p<-5
pclusters <- kmeans(pmatrix, kbest.p, nstart=100, iter.max=100)
pclusters
pclusters$centers
pclusters$size
groups <- pclusters$cluster
print_clusters(groups, kbest.p)
set.seed(3)
pclusters <- kmeans(pmatrix, kbest.p, nstart=1, iter.max=100)
pclusters$tot.withinss
set.seed(3)
pclusters <- kmeans(pmatrix, kbest.p, nstart=5, iter.max=100)
pclusters$tot.withinss
pclusters <- kmeans(pmatrix, kbest.p, nstart=5, iter.max=100)
pclusters$tot.withinss
# Evaluating clusterings with different numbers of clusters
library(reshape2)
source("../CH.R")
source("../WSS.R")
clustcrit <- ch_criterion(pmatrix, 10, method="hclust")
critframe <- data.frame(k=1:10, ch=scale(clustcrit$crit), wss=scale(clustcrit$wss))
critframe <- melt(critframe, id.vars=c("k"), variable.name="measure", value.name="score")
ggplot(critframe, aes(x=k, y=score, color=measure)) +
geom_point(aes(shape=measure)) + geom_line(aes(linetype=measure)) +
scale_x_continuous(breaks=1:10, labels=1:10)
# THE KMEANSRUNS FUNCTION FOR PICKING K
clustering.ch <- kmeansruns(pmatrix, krange=1:10, criterion="ch")
clustering.ch$bestk
clustering.ch$crit
clustering.asw <- kmeansruns(pmatrix, krange=1:10, criterion="asw")
clustering.asw$bestk
critframe <- data.frame(k=1:10, ch=scale(clustering.ch$crit),
asw=scale(clustering.asw$crit))
critframe <- melt(critframe, id.vars=c("k"), variable.name="measure", value.name="score")
ggplot(critframe, aes(x=k, y=score, color=measure)) +geom_point(aes(shape=measure)) + geom_line(aes(linetype=measure)) + scale_x_continuous(breaks=1:10, labels=1:10)
ggplot(project.plus, aes(x=PC1, y=PC2)) +
geom_point(aes(shape=cluster)) +
geom_text(aes(label=country),
hjust=0, vjust=1)
# NOT RUN {
data("smoke")
get("smoke", "package:datasets")
# Correspondence Analysis
library(ca)
install.packages("ca")
# Correspondence Analysis
library(ca)
mytable <- with(mydata, table(A,B)) # create a 2 way table
View(iris)
View(ir.pca)
summary(ir.pca)
iris <- get("iris", "package:datasets")
ir.species <- iris[, 5]
ir.log <- log(iris[, 1:4])
ir.pca <- prcomp(ir.log,center = TRUE, scale. = TRUE)
library("FactoMineR")
install.packages("FactoMineR")
install.packages("factoextra")
library("FactoMineR")
library("factoextra")
res.ca <- CA(iris[, 1:4], graph = TRUE)
data(housetasks)
force(housetasks)
View(housetasks)
?CA
ir.ca <- iris
rownames(ir.ca) <- iris[,5]
data("children")
View(children)
install.packages("MASS")
library(ca)
library(MASS)
library(ggbiplot)
ir.scale <- scale(iris[, 1:4])
ir.kmean <- kmeans(iris[, 1:4], centers = 5)
View(ir.kmean)
summary(ir.kmean)
ir.kmean.table <- table(iris$Species, ir.kmean$cluster)
ir.kmean.table
ir.kmean$cluster
?ca
ir.ca <- ca(ir.kmean.table, nd = 2)
plot(ir.ca)
plot(ir.ca, arrows = c(TRUE, FALSE))
plot(ir.ca, arrows = c(FALSE, TRUE))
library(shiny)
library(data.table)
library(ggplot2)
runApp()
runApp()
runApp()
